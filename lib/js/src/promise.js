// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

function map(f, p) {
  return p.then(f);
}

function chain(f, p) {
  return p.then(f);
}

function $$catch(f, p) {
  return p.catch((function (x) {
                return Promise.reject(Curry._1(f, x));
              }));
}

function biMap(fail, success, p) {
  return p.then(success, (function (err) {
                return Promise.reject(Curry._1(fail, err));
              }));
}

function mapError(f, p) {
  return p.then((function (x) {
                return x;
              }), (function (err) {
                return Promise.reject(Curry._1(f, err));
              }));
}

function $$finally(f, g, p) {
  var p$1 = p.then(g, f);
  p$1.catch((function () {
          return /* () */0;
        }));
  return /* () */0;
}

function fold(f, g, p) {
  return p.then(g, f);
}

function fromOption(err, opt) {
  if (opt) {
    return Promise.resolve(opt[0]);
  } else {
    return Promise.reject(err);
  }
}

function fromJs(p) {
  return p.then((function (x) {
                return x;
              }));
}

function make(f) {
  return new Promise((function (resolve, reject) {
                return Curry._2(f, reject, resolve);
              }));
}

function resolve(prim) {
  return Promise.resolve(prim);
}

function reject(prim) {
  return Promise.reject(prim);
}

function all(prim) {
  return Promise.all(prim);
}

exports.resolve    = resolve;
exports.reject     = reject;
exports.all        = all;
exports.map        = map;
exports.chain      = chain;
exports.$$catch    = $$catch;
exports.biMap      = biMap;
exports.mapError   = mapError;
exports.$$finally  = $$finally;
exports.fold       = fold;
exports.fromOption = fromOption;
exports.fromJs     = fromJs;
exports.make       = make;
/* No side effect */
